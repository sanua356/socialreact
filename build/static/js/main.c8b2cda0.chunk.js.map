{"version":3,"sources":["components/LoginRoom/loginRoom.module.css","assets/Sidebar/username2.png","assets/Loader/error.png","assets/LoginRoom/loginIcon2.png","reportWebVitals.js","APIrequests/api.js","redux/reducers/mainReducer.js","redux/reducers/loginroomReducer.js","webSocket/socketConnect.js","redux/reducers/messagesChatReducer.js","redux/reducers/navbarReducer.js","redux/reducers/webSocketReducer.js","redux/reduxStore.jsx","components/navbar/Navbar.jsx","components/CommonComponents/Loader/Loader.jsx","components/MainScreenMsg/MainScreenMsgInputForm.jsx","components/MainScreenMsg/MessagesChatPage.jsx","components/MainScreenMsg/MainScreenMsgClear.jsx","components/MainScreenMsg/MainScreenMessagesLogicFunctions.jsx","components/MainScreenMsg/MessagesContainer.jsx","components/404/Error404.jsx","components/CommonComponents/MainComponent.jsx","components/LoginRoom/LoginRoomForm.jsx","components/LoginRoom/LoginRoomClear.jsx","components/LoginRoom/LoginRoomContainer.jsx","components/CommonComponents/LogginingRouter.jsx","index.js","components/navbar/navbar.module.css","components/MainScreenMsg/styles/messagesFrom.module.css","components/Header/header.module.css","components/CommonComponents/Loader/LoaderStyles.module.css","components/MainScreenMsg/styles/messagesChatBubbles.module.css","components/MainScreenMsg/styles/messagesChatArea.module.css","components/Header/Header.jsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","hash","require","messagesAPI","addNewMessageFromServer","roomID","userSenderMessage","message","usernameSecretKey","axios","getMessagesFromServer","firstMessageID","myUsername","a","deleteMessages","messagesID","console","log","data","loginAPI","checkRoomExists","localStorage","getItem","createNewRoom","webSocketConnect","username","payload","MD5","actionsNames","initialState","isLoggined","roomIsExists","CHANGE_ROOM_EXISTS_STATUS_AC","status","type","existsStatus","SEND_LOGINROOM_DATA_AC","usernameFieldValue","usernameSecretKeyFieldValue","roomIDFieldValue","CHANGE_NAME_STATUS_LOGGINING_BTN_AC","changedName","enableStatus","CHANGE_ROOM_IS_EXISIS_SERVER_RESPONSE_AC","messageServerData","SET_ERROR_MESSAGE_AC","errorMessage","changedUsername","changedRoomID","changedSecretKeyUsername","notCorrectValidationData","loginBtnName","loginBtnClickableStatus","roomIsExistsServerResponse","errors","checkRoomExistsTC","dispatch","response","catch","error","socket","io","ADD_NEW_MESSAGE_FROM_DATA_BASE_AC","messageID","messageOwner","GET_MESSAGES_LIST_FROM_API_АС","messages","loadedMessagesArrayLength","messagesJSON","CHANGE_LOADING_STATUS_AC","loadingStatus","ADD_ERROR_MESSAGE_АС","ADD_ERROR_SERVER_MESSAGE_NOTIFICACTION_AC","errorServerMessagesNotification","messagesList","messagesEmptyStatusRoom","isLoading","seletctedMessages","lastMessageID","getMessagesFromServerTC","length","sidebarMenuItems","itemName","link","icon","faUser","faComments","faEdit","faDoorOpen","CHANGE_CONNECTING_STATUS_AC","CHANGE_USERS_LIST_AC","users","connectingStatus","reducers","combineReducers","manyPages","state","action","stateCopy","messagesPage","messageOwnership","newMessage","id","dateTimeMessage","Date","now","messageSender","push","messagesArray","reverse","loadedMessages","i","checkExistsMessage","indexOf","splice","sidebarPage","loginRoomPage","clear","setItem","createOrLoginStatus","webSocket","store","createStore","applyMiddleware","thunk","NavbarContainer","connect","props","mappedMenuArray","map","menuItem","to","key","activeClassName","NavbarStyle","activeLink","className","menuItemStyle","menuItemIcon","menuItemName","navbar","navbarSiteTitle","userBlock","src","UsernameIcon","alt","Loader","LoaderStyles","dFlexScreenLoader","loader","lazyLoadComponent","ldsRoller","errorImg","notification","title","insert","container","dismiss","duration","pauseOnHover","onScreen","MainScreenMsgInputForm","useState","selectedMessagesLength","setSelectedMessagesLength","useEffect","addNotification","clearServerMessageAfterView","on","setUsersList","text","sendNewMessageWS","validationSchema","yup","shape","messageTextarea","typeError","required","initialValues","onSubmit","values","resetForm","sendNewMessageDB","messagesListLength","setFieldValue","validateOnBlur","handleChange","isValid","handleSubmit","dirty","MainScrMsg","controlElementsChat","controlElementsChatHeaderWithTextareaBtns","disabled","changeSendedMessageControlsBtns","onClick","selectedMessages","faTrashAlt","controlsBtns","as","name","placeholder","value","onChange","onKeyDown","e","preventDefault","sendMessageBtn","faEnvelope","messageSenderStyle","MainScrMsgStyle","myMessage","opponentMessage","MessagesChatPage","React","memo","chatScreen","createRef","messageSelected","setMessageSelected","selectMessageFromChat","selectedMessagesArray","Object","keys","mappedMessagesArray","selectedMessage","messageInfo","faUserTie","errorMessageIcon","faExclamationTriangle","faUserSecret","getMessagesUIMap","current","scrollTop","scrollHeight","messagesEmptyStatus","ref","loadMoreBtn","loadMoreMessages","MessagesClear","Main","chatBlock","Header","loadedFromMessagesPage","headerTitle","headerDescription","usersCount","MainScreenMsgClearComponent","changedTextareaMessage","serverResponse","emit","addNewMessageFromServerTC","changeLoadingStatus","SELECT_MESSAGE_FROM_CHAT_AC","deleteMessagesFromServerTC","usersList","MainScreenMsgClear","MainScreenMessagesLogicComponent","MessagesContainer","webSocketConnected","get","webSocketConnectTC","MainScreenMessagesLogicFunctions","Error404","Profile","lazy","Updates","Logout","MainComponent","exact","path","fallback","from","LoginRoomForm","formTouched","setFormTouched","showErrorExistsMessage","setShowErrorExistsMessage","changeCreateRoom","setChangeCreateRoom","roomExistsServerResponse","changeCreateOrLoginStatus","min","max","secretKeyUsername","sendDataFields","touched","handleBlur","LoginRoomStyle","form","titleAndLogo","loginIcon","messageFromDB","fieldBlock","tabIndex","onBlur","onKeyPress","enterKeyPressed","faKey","faDoorClosed","loginBtn","LoginRoomClear","loginScreen","loginroomBlock","positionForm","LoginRoomContainer","errorsValidation","CHANGE_CREATE_OR_LOGIN_STATUS_AC","Loggining","attemptToLoginWithOldData","ReactDOM","render","StrictMode","getState","document","getElementById","window","HeaderStyle","header","headerRoomInfo","selectedMessagesCounter","headerControlsBtns","href","faEllipsisH","faBell","bellAnimation"],"mappings":"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","file":"static/js/main.c8b2cda0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginScreen\":\"loginRoom_loginScreen__3yCO_\",\"loginroomBlock\":\"loginRoom_loginroomBlock__3BZat\",\"positionForm\":\"loginRoom_positionForm__3eOr5\",\"form\":\"loginRoom_form__360a5\",\"titleAndLogo\":\"loginRoom_titleAndLogo__YrJ22\",\"messageFromDB\":\"loginRoom_messageFromDB__2q82M\",\"fieldBlock\":\"loginRoom_fieldBlock__3oYKI\",\"loginBtn\":\"loginRoom_loginBtn__AMjOY\",\"error\":\"loginRoom_error__2fhxt\",\"createNewRoom\":\"loginRoom_createNewRoom__2hoKS\"};","module.exports = __webpack_public_path__ + \"static/media/username2.b84e94b3.png\";","module.exports = __webpack_public_path__ + \"static/media/error.8dd46f3d.png\";","module.exports = __webpack_public_path__ + \"static/media/loginIcon2.b84e94b3.png\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as axios from \"axios\";\r\nconst hash = require(\"object-hash\");\r\n\r\nexport const messagesAPI = {\r\n  addNewMessageFromServer: (\r\n    roomID,\r\n    userSenderMessage,\r\n    message,\r\n    usernameSecretKey\r\n  ) => {\r\n    if (roomID && userSenderMessage && message) {\r\n      return axios.post(\r\n        `http://alp-srv.ru/addnewmessage.php?roomid=${roomID}`,\r\n        {\r\n          userSenderMessage: userSenderMessage,\r\n          message: message,\r\n          usernameSecretKey: usernameSecretKey,\r\n        }\r\n      );\r\n    }\r\n  },\r\n  getMessagesFromServer: async (\r\n    roomID,\r\n    firstMessageID,\r\n    myUsername,\r\n    usernameSecretKey\r\n  ) => {\r\n    if (firstMessageID === null) {\r\n      return await axios.get(\r\n        `http://alp-srv.ru/roomsgetmessages.php?roomid=${roomID}&username=${myUsername}&usernamesecretkey=${usernameSecretKey}`\r\n      );\r\n    } else {\r\n      return await axios.get(\r\n        `http://alp-srv.ru/roomsgetmessages.php?roomid=${roomID}&firstmessageid=${firstMessageID}&username=${myUsername}&usernamesecretkey=${usernameSecretKey}`\r\n      );\r\n    }\r\n  },\r\n  deleteMessages: async (roomID, messagesID) => {\r\n    console.log(roomID, messagesID);\r\n    return await axios.delete(\r\n      `http://alp-srv.ru/deletemessages.php?roomid=${roomID}`,\r\n      {\r\n        data: {\r\n          messagesID,\r\n        },\r\n      }\r\n    );\r\n  },\r\n};\r\n\r\nexport const loginAPI = {\r\n  checkRoomExists: async () => {\r\n    const roomID = localStorage.getItem(\"roomID\");\r\n    return await axios.get(\r\n      `http://alp-srv.ru/roomsexists.php?roomid=${roomID}`\r\n    );\r\n  },\r\n  createNewRoom: async () => {\r\n    const roomID = localStorage.getItem(\"roomID\");\r\n    return await axios.get(\r\n      `http://alp-srv.ru/createnewroom.php?roomid=${roomID}`\r\n    );\r\n  },\r\n  webSocketConnect: (roomID, username, usernameSecretKey) => {\r\n    const payload = {\r\n      roomID: roomID,\r\n      username: username,\r\n      usernameSecretKey: hash.MD5(usernameSecretKey),\r\n    };\r\n    return axios.post(\"/rooms\", payload);\r\n  },\r\n};\r\n","const actionsNames = {\r\n  //Обьект с константами для вызова Action Creater\r\n  SAVE_ROOMID_AND_USERNAME_LOCALSTORAGE:\r\n    \"SAVE_ROOMID_AND_USERNAME_LOCALSTORAGE\",\r\n  CHANGE_ROOM_EXISTS_STATUS: \"CHANGE_ROOM_EXISTS_STATUS\",\r\n};\r\n\r\nconst initialState = {\r\n  username: \"\",\r\n  roomID: \"\",\r\n  usernameSecretKey: \"\",\r\n  isLoggined: false,\r\n  roomIsExists: false,\r\n};\r\n\r\nexport function SAVE_ROOMID_AND_USERNAME_LOCALSTORAGE_AC() {\r\n  //АС, который вызывается для сохранения в state данных username и roomID из Localstorage\r\n  return {\r\n    type: \"SAVE_ROOMID_AND_USERNAME_LOCALSTORAGE\",\r\n  };\r\n}\r\nexport function CHANGE_ROOM_EXISTS_STATUS_AC(status) {\r\n  //АС, который вызывается для проверки существования комнаты, и последующей отправки флага существования в state\r\n  return {\r\n    type: \"CHANGE_ROOM_EXISTS_STATUS\",\r\n    existsStatus: status,\r\n  };\r\n}\r\nexport const mainReducer = (state = initialState, action) => {\r\n  //Reducer со всеми экшенами взаимодействия страниц, которым нужны глобальные данные по типу RoomID и username\r\n  let stateCopy = { ...state };\r\n  switch (action.type) {\r\n    case actionsNames.SAVE_ROOMID_AND_USERNAME_LOCALSTORAGE: //Вызов при клике на кнопку логина на странице /login\r\n      stateCopy = { ...state };\r\n      if (\r\n        //Если в localstorage попали данные со странице логина, значит валидация успешна и комната существует\r\n        localStorage.getItem(\"username\") !== null &&\r\n        localStorage.getItem(\"roomID\") !== null &&\r\n        localStorage.getItem(\"usernameSecretKey\") !== null\r\n      ) {\r\n        stateCopy.username = localStorage.getItem(\"username\"); //Сохранить в state данные ника из localstorage\r\n        stateCopy.roomID = localStorage.getItem(\"roomID\"); //Сохранить в state данные RoomID из localstorage\r\n        stateCopy.usernameSecretKey = localStorage.getItem(\"usernameSecretKey\"); //Сохранить в state данные секретного ключа ника из localstorage\r\n        stateCopy.isLoggined = true; //Поставить флаг залогинености на true\r\n      } else {\r\n        //Если нет данных из localstorage\r\n        stateCopy.isLoggined = false; //Поставить флаг залогинености на false\r\n      }\r\n      return stateCopy;\r\n    case actionsNames.CHANGE_ROOM_EXISTS_STATUS: //Вызов при смене статуса существования комнаты\r\n      stateCopy = { ...state };\r\n      stateCopy.roomIsExists = action.existsStatus; //Отправить значения флага существования комнаты из action в state\r\n      return stateCopy;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as axios from \"axios\";\r\nimport { loginAPI } from \"../../APIrequests/api\"; //Импорт обьекта с асинхронщиной к серверу для страницы логина\r\nimport { CHANGE_ROOM_EXISTS_STATUS_AC } from \"../reducers/mainReducer\"; //Импорт Action Creater для проверки существования комнаты при логине\r\nconst actionsNames = {\r\n  //Обьект с константами для вызова Action Creater\r\n  CHANGED_USERNAME_FIELD_IN_LOGIN_ROOM: \"CHANGED_USERNAME_FIELD_IN_LOGIN_ROOM\",\r\n  CHANGED_ROOMID_FIELD_IN_LOGIN_ROOM: \"CHANGED_ROOMID_FIELD_IN_LOGIN_ROOM\",\r\n  SEND_LOGINROOM_DATA: \"SEND_LOGINROOM_DATA\",\r\n  CHANGE_NAME_STATUS_LOGGINING_BTN: \"CHANGE_NAME_STATUS_LOGGINING_BTN\",\r\n  CHANGE_ROOM_IS_EXISIS_SERVER_RESPONSE:\r\n    \"CHANGE_ROOM_IS_EXISIS_SERVER_RESPONSE\",\r\n  CHANGE_CREATE_OR_LOGIN_STATUS: \"CHANGE_CREATE_OR_LOGIN_STATUS\",\r\n  SET_ERROR_MESSAGE: \"SET_ERROR_MESSAGE\",\r\n};\r\n\r\nexport function SEND_LOGINROOM_DATA_AC(\r\n  usernameFieldValue,\r\n  usernameSecretKeyFieldValue,\r\n  roomIDFieldValue\r\n) {\r\n  //АС, который вызывается при клике на кнопку \"Login\" на странице логина\r\n  return {\r\n    type: \"SEND_LOGINROOM_DATA\",\r\n    usernameFieldValue,\r\n    usernameSecretKeyFieldValue,\r\n    roomIDFieldValue,\r\n  };\r\n}\r\n\r\nexport function CHANGE_NAME_STATUS_LOGGINING_BTN_AC(changedName, enableStatus) {\r\n  //АС, который вызывается во время отправки запроса к БД для проверки существования комнаты\r\n  return {\r\n    type: \"CHANGE_NAME_STATUS_LOGGINING_BTN\",\r\n    changedName,\r\n    enableStatus,\r\n  };\r\n}\r\n\r\nexport function CHANGE_ROOM_IS_EXISIS_SERVER_RESPONSE_AC(messageServerData) {\r\n  return {\r\n    type: \"CHANGE_ROOM_IS_EXISIS_SERVER_RESPONSE\",\r\n    messageServerData,\r\n  };\r\n}\r\nexport function CHANGE_CREATE_OR_LOGIN_STATUS_AC(status) {\r\n  return {\r\n    type: \"CHANGE_CREATE_OR_LOGIN_STATUS\",\r\n    status,\r\n  };\r\n}\r\n\r\nexport function SET_ERROR_MESSAGE_AC(errorMessage) {\r\n  return {\r\n    type: \"SET_ERROR_MESSAGE\",\r\n    errorMessage,\r\n  };\r\n}\r\n\r\nconst initialState = {\r\n  changedUsername: \"\", //Временная переменная, хранящая строку из input ввода ника\r\n  changedRoomID: \"\", //Временная переменная, хранящая строку из input ввода RoomID\r\n  changedSecretKeyUsername: \"\", //Временная переменная, хранящая секретный ключ ника пользователя\r\n  notCorrectValidationData: \"\", //Временная переменная, хранящая строку при возникновении ошибок ввода (валидации) введённых данных в inputs\r\n  loginBtnName: \"Login\", //Переменная, хранящая текст внутри кнопки логина (нужна для вывода сообщения \"Loggining...\") во время ожидания ответа запроса к БД\r\n  loginBtnClickableStatus: true, //Переменная для отключения кнопки, во время ожиданеия ответа от сервера к БД\r\n  roomIsExistsServerResponse: \"\", //Переменная нужна для корректной работы вывода на экран ошибки, если комнаты нет\r\n  errors: \"\",\r\n};\r\n\r\nexport const loginroomReducer = (state = initialState, action) => {\r\n  //Reducer со всеми экшенами взаимодействия страницы логина\r\n  let stateCopy = { ...state };\r\n  switch (action.type) {\r\n    case actionsNames.SEND_LOGINROOM_DATA: //Экшн, отвечающий за сохранение данных ника и RoomID в LocalStorage\r\n      localStorage.clear(); //Почистить хранилище от старых значений (если они есть) ника и RoomID\r\n      localStorage.setItem(\"username\", action.usernameFieldValue); //Сохранить в хранилище ник\r\n      localStorage.setItem(\"roomID\", action.roomIDFieldValue); //Сохранить в хранилище RoomID\r\n      localStorage.setItem(\r\n        \"usernameSecretKey\",\r\n        action.usernameSecretKeyFieldValue\r\n      ); //Сохранить секретный ключ ника в хранлище\r\n      stateCopy.notCorrectValidationData = \"\"; //Очистить поле ошибок валидации\r\n      stateCopy.usernameFieldValue = \"\"; //Очистить input ника на странице валидации\r\n      stateCopy.roomIDFieldValue = \"\"; //Очистить input RoomID на странице валидации\r\n      return stateCopy;\r\n    case actionsNames.CHANGE_NAME_STATUS_LOGGINING_BTN: //Экшн, меняющий статус кнопки (отключение/включение), пока нет ответа на запрос от сервера\r\n      stateCopy = { ...state };\r\n      stateCopy.loginBtnClickableStatus = action.enableStatus;\r\n      stateCopy.loginBtnName = action.changedName; //Изменить название внутри кнопки логин на то, которое пришло от action параметра\r\n      return stateCopy;\r\n    case actionsNames.CHANGE_ROOM_IS_EXISIS_SERVER_RESPONSE:\r\n      stateCopy = { ...state };\r\n      if (action.messageServerData == null) {\r\n        stateCopy.roomIsExistsServerResponse = null;\r\n      } else {\r\n        stateCopy.roomIsExistsServerResponse = action.messageServerData;\r\n      }\r\n      return stateCopy;\r\n    case actionsNames.CHANGE_CREATE_OR_LOGIN_STATUS:\r\n      stateCopy = { ...state };\r\n      stateCopy.createOrLoginStatus = action.status;\r\n      return stateCopy;\r\n    case actionsNames.SET_ERROR_MESSAGE:\r\n      stateCopy = { ...state };\r\n      stateCopy.errors = action.errorMessage;\r\n      return stateCopy;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const checkRoomExistsTC = () => {\r\n  //Thunk creator, посылающий запрос к API с проверкой существования комнаты\r\n  return (dispatch) => {\r\n    dispatch(CHANGE_NAME_STATUS_LOGGINING_BTN_AC(\"Loggining...\"), false); //Отключить кнопку логина на время ожидания запроса\r\n    loginAPI\r\n      .checkRoomExists()\r\n      .then((response) => {\r\n        //Как получен ответ выполнить логику ниже\r\n        console.log(response.data);\r\n        if (response.data != null) {\r\n          //Если комната есть, включить кнопку логина и в dispatch отправить статус существования комнаты с флагом true\r\n          console.log(\"Room yes\");\r\n          dispatch(CHANGE_ROOM_IS_EXISIS_SERVER_RESPONSE_AC(response.data));\r\n          dispatch(CHANGE_ROOM_EXISTS_STATUS_AC(true));\r\n          dispatch(CHANGE_NAME_STATUS_LOGGINING_BTN_AC(\"Login\", true));\r\n        } else {\r\n          //Если же комнаты нет, включить кнопку логина  и в dispatch отправить статус существования комнаты с флагом false\r\n          console.log(\"Room does not exists.\");\r\n          dispatch(CHANGE_ROOM_IS_EXISIS_SERVER_RESPONSE_AC(response.data));\r\n          dispatch(CHANGE_ROOM_EXISTS_STATUS_AC(false));\r\n          dispatch(CHANGE_NAME_STATUS_LOGGINING_BTN_AC(\"Login\"), true);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //Если есть косяки при отправке запроса, вывести их на экран\r\n        dispatch(CHANGE_ROOM_EXISTS_STATUS_AC(false));\r\n        dispatch(CHANGE_NAME_STATUS_LOGGINING_BTN_AC(\"Login\", true));\r\n        dispatch(SET_ERROR_MESSAGE_AC(\"Not connection. Try again later.\"));\r\n      });\r\n  };\r\n};\r\n\r\nexport const createNewRoomTC = (status) => {\r\n  return (dispatch) => {\r\n    if (status) {\r\n      dispatch(CHANGE_NAME_STATUS_LOGGINING_BTN_AC(\"Creating...\"), false); //Отключить кнопку логина на время ожидания запроса\r\n      loginAPI\r\n        .createNewRoom()\r\n        .then((response) => {\r\n          //Как получен ответ выполнить логику ниже\r\n          console.log(response.data);\r\n          if (response.data == true) {\r\n            //Если комната есть, включить кнопку логина и в dispatch отправить статус существования комнаты с флагом true\r\n            console.log(\"Room created\");\r\n            dispatch(CHANGE_ROOM_EXISTS_STATUS_AC(true));\r\n            dispatch(CHANGE_NAME_STATUS_LOGGINING_BTN_AC(\"Create\", true));\r\n          } else {\r\n            //Если же комнаты нет, включить кнопку логина  и в dispatch отправить статус существования комнаты с флагом false\r\n            console.log(\"Room not created.\", response.data);\r\n            dispatch(CHANGE_ROOM_EXISTS_STATUS_AC(false));\r\n            dispatch(CHANGE_NAME_STATUS_LOGGINING_BTN_AC(\"Create\"), true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          //Если есть косяки при отправке запроса, вывести их на экран\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n};\r\n","import io from \"socket.io-client\";\r\n\r\nconst socket = io();\r\n\r\nexport default socket;\r\n","import { messagesAPI } from \"../../APIrequests/api\"; //Импорт обьекта с асинхронщиной к серверу для страницы сообщений\r\nimport socket from \"../../webSocket/socketConnect\";\r\nconst actionsNames = {\r\n  //Обьект с константами для вызова Action Creater\r\n  ADD_NEW_MESSAGE_FROM_DATA_BASE: \"ADD_NEW_MESSAGE_FROM_DATA_BASE\",\r\n  GET_MESSAGES_LIST_FROM_API: \"GET_MESSAGES_LIST_FROM_API\",\r\n  CHANGE_LOADING_STATUS: \"CHANGE_LOADING_STATUS\",\r\n  ADD_ERROR_MESSAGE: \"ADD_ERROR_MESSAGE\",\r\n  SELECT_MESSAGE_FROM_CHAT: \"SELECT_MESSAGE_FROM_CHAT\",\r\n  DELETE_MESSAGES_FROM_CHAT: \"DELETE_MESSAGES_FROM_CHAT\",\r\n  ADD_ERROR_SERVER_MESSAGE_NOTIFICATION:\r\n    \"ADD_ERROR_SERVER_MESSAGE_NOTIFICATION\",\r\n  SET_USERS_COUNT: \"SET_USERS_COUNT\",\r\n};\r\n\r\nexport function ADD_NEW_MESSAGE_FROM_DATA_BASE_AC(\r\n  errors,\r\n  username,\r\n  roomID,\r\n  message,\r\n  messageID,\r\n  messageOwner\r\n) {\r\n  //AC, возникающий при клике на кнопку \"Send message\" (или нажатие Enter) на странице чата\r\n  return {\r\n    type: \"ADD_NEW_MESSAGE_FROM_DATA_BASE\",\r\n    errors,\r\n    username,\r\n    roomID,\r\n    message,\r\n    messageID,\r\n    messageOwner,\r\n  };\r\n}\r\n\r\nexport function GET_MESSAGES_LIST_FROM_API_АС(\r\n  roomID,\r\n  messages,\r\n  errors,\r\n  firstMessageID,\r\n  loadedMessagesArrayLength\r\n) {\r\n  //АС, который вызывается при переходе на страницу /messages для получения списка сообщений с сервера\r\n  return {\r\n    type: \"GET_MESSAGES_LIST_FROM_API\",\r\n    roomID,\r\n    messagesJSON: messages,\r\n    errors,\r\n    firstMessageID,\r\n    loadedMessagesArrayLength,\r\n  };\r\n}\r\nexport function CHANGE_LOADING_STATUS_AC(loadingStatus) {\r\n  //АС, нужный для работы Loader Component на странице сообщений, пока ждём ответ от сервера\r\n  return {\r\n    type: \"CHANGE_LOADING_STATUS\",\r\n    loadingStatus,\r\n  };\r\n}\r\nexport function ADD_ERROR_MESSAGE_АС(error) {\r\n  //АС, выводящий оповещение с ошибками (если они возникают)\r\n  return {\r\n    type: \"ADD_ERROR_MESSAGE\",\r\n    error,\r\n  };\r\n}\r\n\r\nexport function SELECT_MESSAGE_FROM_CHAT_AC(messageID) {\r\n  return {\r\n    type: \"SELECT_MESSAGE_FROM_CHAT\",\r\n    messageID,\r\n  };\r\n}\r\nexport function DELETE_MESSAGES_FROM_CHAT_AC() {\r\n  return {\r\n    type: \"DELETE_MESSAGES_FROM_CHAT\",\r\n  };\r\n}\r\n\r\nexport function ADD_ERROR_SERVER_MESSAGE_NOTIFICACTION_AC(\r\n  errorServerMessagesNotification\r\n) {\r\n  return {\r\n    type: \"ADD_ERROR_SERVER_MESSAGE_NOTIFICATION\",\r\n    errorServerMessagesNotification,\r\n  };\r\n}\r\n\r\nconst initialState = {\r\n  messagesList: [], //Массив списка сообщений, полученных с сервера для вывода в UI\r\n  messagesEmptyStatusRoom: false, //Переменная, которая ставится в true, если с сервера пришла пустая комната без сообщений\r\n  errors: \"\", //Переменная для вывода ошибок ввода на экран (если они возникают)\r\n  isLoading: false, //Флаг показа GIF с Loader, пока выполняется запрос к серверу\r\n  seletctedMessages: [], //Обьект в котором будут храниться ID сообщений для взаимодействия (Например удаление)\r\n  errorServerMessagesNotification: \"\",\r\n  firstMessageID: null, //Переменная, в которой хранится ID первого загруженного сообщения (самого старого с сервера). Это нужно для дозагрузки сообщений с сервера относительно старого ID.\r\n  loadedMessagesArrayLength: 0, //Переменная, в которой хранится длина массива дозагруженных сообщений с сервера (нужна для скрытия/отображения кнопкп load more messages)\r\n  lastMessageID: -1, //ID последнего полученного сообщения\r\n};\r\n\r\nexport const messagesReducer = (state = initialState, action) => {\r\n  let stateCopy = { ...state };\r\n  switch (action.type) {\r\n    case actionsNames.ADD_NEW_MESSAGE_FROM_DATA_BASE: //Если АС = отправка сообщения к БД\r\n      stateCopy = { ...state, messagesList: [...state.messagesList] };\r\n      //Если нет ошибок ввода\r\n      if (action.message && stateCopy.lastMessageID != action.messageID) {\r\n        let messageOwnership = \"opponent\";\r\n        if (action.messageOwner === \"me\") {\r\n          messageOwnership = \"me\";\r\n        }\r\n        //Если поле ввода сообщений не пусто\r\n        const newMessage = {\r\n          //Формирует обьект с новым сообщением и push его в массив сообщений state\r\n          id: action.messageID,\r\n          dateTimeMessage: Date.now(),\r\n          messageSender: action.username,\r\n          message: action.message,\r\n          errors: action.errors,\r\n          messageOwnership: messageOwnership,\r\n        };\r\n        stateCopy.messagesList.push(newMessage); //push в массив сообщений\r\n        stateCopy.lastMessageID = action.messageID;\r\n        console.log(\"Message sended\");\r\n        stateCopy.messagesEmptyStatusRoom = false;\r\n        console.log(stateCopy.messagesList);\r\n        return stateCopy;\r\n      } else {\r\n        //Если поле ввода сообщений пусто\r\n        stateCopy.errors = \"Message is empty\";\r\n        console.log(\"Message is empty!\");\r\n        return stateCopy;\r\n      }\r\n    case actionsNames.GET_MESSAGES_LIST_FROM_API: //Если АС = получить список сообщений с сервера по введённой roomID\r\n      stateCopy = { ...state, ...state.messagesList };\r\n      if (!action.firstMessageID) stateCopy.messagesList = []; //Очистить список старых сообщений (если они вообще есть)\r\n      stateCopy.errors = \"\"; //Очистить список ошибок (если они вообще есть)\r\n      stateCopy.messagesEmptyStatusRoom = false;\r\n      stateCopy.loadedMessagesArrayLength = action.loadedMessagesArrayLength;\r\n      if (action.messagesJSON !== null) {\r\n        //Если сообщения с сервера пришли (То есть если они вообще есть на сервере по введённому RoomID)\r\n        if (action.messagesJSON !== \"No messages\") {\r\n          const messagesArray = action.messagesJSON.reverse();\r\n          console.log(messagesArray);\r\n          stateCopy.firstMessageID = messagesArray[0].id;\r\n          //Если с сервера пришло \"No messages\", значит сообщений точно нет\r\n          if (!action.firstMessageID) {\r\n            for (let i = 0; i < messagesArray.length; i++) {\r\n              stateCopy.messagesList.push(messagesArray[i]); //Заполнить массив сообщений в state данными response с сервера\r\n            }\r\n          } else {\r\n            let loadedMessages = [];\r\n            for (let i = 0; i < messagesArray.length; i++) {\r\n              loadedMessages.push(messagesArray[i]); //Заполнить массив сообщений в state данными response с сервера\r\n            }\r\n            stateCopy.messagesList = [\r\n              ...loadedMessages,\r\n              ...stateCopy.messagesList,\r\n            ];\r\n          }\r\n        } else {\r\n          //Если сообщений не пришло (сервер вернул ответ, что сообщений нет)\r\n          stateCopy.messagesEmptyStatusRoom = true;\r\n        }\r\n      } else {\r\n        //Если сообщений не пришло (косяк в коде)\r\n        stateCopy.errors = true;\r\n      }\r\n      return stateCopy;\r\n    case actionsNames.CHANGE_LOADING_STATUS: //Если АС = изменить статус показа Loader на экране\r\n      stateCopy = { ...state };\r\n      stateCopy.isLoading = action.loadingStatus; //Изменить флаг в state, значнием, пришедшим из action\r\n      return stateCopy;\r\n    case actionsNames.ADD_ERROR_MESSAGE: //Если АС = появились ошибки при выполнении логики\r\n      stateCopy = { ...state };\r\n      stateCopy.errors = action.error; //Сохранить в state строку с ошибкой для последующего вывода её на экран\r\n      return stateCopy;\r\n    case actionsNames.SELECT_MESSAGE_FROM_CHAT: //Если АС = выбрано сообщение в чате (например чтобы удалить). Отправить в state его ID\r\n      stateCopy = { ...state };\r\n      const checkExistsMessage = stateCopy.seletctedMessages.indexOf(\r\n        action.messageID\r\n      );\r\n      if (checkExistsMessage == -1) {\r\n        stateCopy.seletctedMessages.push(action.messageID);\r\n      } else {\r\n        stateCopy.seletctedMessages.splice(checkExistsMessage, 1);\r\n      }\r\n      return stateCopy;\r\n    case actionsNames.DELETE_MESSAGES_FROM_CHAT:\r\n      stateCopy = {\r\n        ...state,\r\n        messagesList: [...state.messagesList],\r\n        seletctedMessages: [...state.seletctedMessages],\r\n      };\r\n      return stateCopy;\r\n    case actionsNames.ADD_ERROR_SERVER_MESSAGE_NOTIFICATION:\r\n      stateCopy = { ...state };\r\n      stateCopy.errorServerMessagesNotification =\r\n        action.errorServerMessagesNotification;\r\n      console.log(stateCopy);\r\n      return stateCopy;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const addNewMessageFromServerTC = (\r\n  //Thunk creator, посылающий запрос к API с отправкой нового сообщения на сервер\r\n  errors,\r\n  myUsername,\r\n  roomID,\r\n  message,\r\n  usernameSecretKey,\r\n  messagesListLength\r\n) => {\r\n  return (dispatch) => {\r\n    let serverResponse;\r\n    messagesAPI\r\n      .addNewMessageFromServer(\r\n        roomID,\r\n        myUsername,\r\n        message,\r\n        usernameSecretKey,\r\n        messagesListLength\r\n      )\r\n      .then((response) => {\r\n        if (response.data !== \"null\") {\r\n          serverResponse = response.data;\r\n          socket.emit(\"ROOM:NEW_MESSAGE\", {\r\n            roomID,\r\n            username: myUsername,\r\n            usernameSecretKey,\r\n            text: message,\r\n            messageID: serverResponse,\r\n          });\r\n        } else {\r\n          serverResponse = messagesListLength + 1;\r\n        }\r\n        dispatch(\r\n          ADD_NEW_MESSAGE_FROM_DATA_BASE_AC(\r\n            errors,\r\n            myUsername,\r\n            roomID,\r\n            message,\r\n            serverResponse,\r\n            \"me\"\r\n          )\r\n        ); //Добавить сообщение в локальный state); //Отправить запрос с данными сообщения на сервер\r\n      })\r\n      .catch(() => {\r\n        dispatch(\r\n          ADD_NEW_MESSAGE_FROM_DATA_BASE_AC(\r\n            \"Oopps. Message not sended. Try again later.\",\r\n            myUsername,\r\n            roomID,\r\n            message,\r\n            messagesListLength + 1,\r\n            \"me\"\r\n          )\r\n        );\r\n        dispatch(\r\n          ADD_ERROR_SERVER_MESSAGE_NOTIFICACTION_AC(\r\n            \"Oopps. Message not sended. Try again later.\"\r\n          )\r\n        );\r\n      });\r\n  };\r\n};\r\n\r\nexport const getMessagesFromServerTC = (\r\n  roomID,\r\n  roomIsExists,\r\n  myUsername,\r\n  firstMessageID = null,\r\n  usernameSecretKey\r\n) => {\r\n  //Thunk creator, посылающий запрос к API и получающий список сообщений по roomID\r\n  return (dispatch) => {\r\n    try {\r\n      if (roomIsExists) {\r\n        //Если комната с таким RoomID вообще существует\r\n        dispatch(CHANGE_LOADING_STATUS_AC(true)); //Включить Loader\r\n        return messagesAPI\r\n          .getMessagesFromServer(\r\n            roomID,\r\n            firstMessageID,\r\n            myUsername,\r\n            usernameSecretKey\r\n          )\r\n          .then((response) => {\r\n            //Послать запрос к API и когда получили ответ, отключить Loader и загрузить response в локальный state через dispatch\r\n            dispatch(\r\n              GET_MESSAGES_LIST_FROM_API_АС(\r\n                roomID,\r\n                response.data,\r\n                \"\",\r\n                firstMessageID,\r\n                response.data.length\r\n              )\r\n            );\r\n            dispatch(CHANGE_LOADING_STATUS_AC(false));\r\n          })\r\n          .catch((error) => {\r\n            //Вывести ошибки при отправке запроса (если они появились)\r\n            dispatch(\r\n              ADD_ERROR_MESSAGE_АС(\r\n                \"Sorry. We have not received any data from the server. Please try again later.\"\r\n              )\r\n            );\r\n          });\r\n      } else {\r\n        dispatch(\r\n          ADD_ERROR_MESSAGE_АС(\"No saved messages from room as room not exist\")\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Опаааа... Пиздец.\");\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteMessagesFromServerTC = (roomID, messagesID) => {\r\n  return async (dispatch) => {\r\n    if (messagesID.length >= 1) {\r\n      const response = await messagesAPI.deleteMessages(roomID, messagesID);\r\n      console.log(response);\r\n      return response;\r\n    } else {\r\n      console.log(\"Messages list is empty!\");\r\n    }\r\n  };\r\n};\r\n","import { faEdit, faDoorOpen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faUser, faComments } from \"@fortawesome/free-regular-svg-icons\";\r\nconst initialState = {\r\n  //State с названиями и ссылками для перехода на странице в меню navbar\r\n  sidebarMenuItems: [\r\n    //Массив ссылок (пунктов меню)\r\n    {\r\n      itemName: \"Profile\",\r\n      link: \"/profile\",\r\n      icon: faUser,\r\n    },\r\n    {\r\n      itemName: \"Messages\",\r\n      link: \"/messages\",\r\n      icon: faComments,\r\n    },\r\n    {\r\n      itemName: \"Updates\",\r\n      link: \"/updates\",\r\n      icon: faEdit,\r\n    },\r\n    {\r\n      itemName: \"Exit\",\r\n      link: \"/logout\",\r\n      icon: faDoorOpen,\r\n    },\r\n  ],\r\n};\r\nexport const navbarReducer = (state = initialState, action) => {\r\n  return state;\r\n};\r\n","import { loginAPI } from \"../../APIrequests/api\";\r\nimport socket from \"../../webSocket/socketConnect\";\r\nconst axios = require(\"axios\");\r\n\r\nconst actionsNames = {\r\n  CHANGE_CONNECTING_STATUS: \"CHANGE_CONNECTING_STATUS\",\r\n  CHANGE_USERS_LIST: \"CHANGE_USERS_LIST\",\r\n};\r\n\r\nexport const CHANGE_CONNECTING_STATUS_AC = (status) => {\r\n  return {\r\n    type: \"CHANGE_CONNECTING_STATUS\",\r\n    status,\r\n  };\r\n};\r\n\r\nexport const CHANGE_USERS_LIST_AC = (users) => {\r\n  return {\r\n    type: \"CHANGE_USERS_LIST\",\r\n    users,\r\n  };\r\n};\r\n\r\nconst initialState = {\r\n  connectingStatus: false,\r\n  users: [],\r\n};\r\n\r\nexport const webSocketConnectTC = (roomID, username, usernameSecretKey) => {\r\n  return (dispatch) => {\r\n    loginAPI\r\n      .webSocketConnect(roomID, username, usernameSecretKey)\r\n      .then((response) => {\r\n        if (response.data === \"ok\") {\r\n          console.log(\"WS Connected :)\");\r\n          dispatch(CHANGE_CONNECTING_STATUS_AC(true));\r\n          const data = {\r\n            roomID,\r\n            username,\r\n            usernameSecretKey,\r\n          };\r\n          socket.emit(\"ROOM:JOIN\", data);\r\n          axios\r\n            .get(`/rooms/${roomID}`)\r\n            .then((response) => {\r\n              dispatch(CHANGE_USERS_LIST_AC(response.data.users));\r\n            })\r\n            .catch((error) => {\r\n              console.log(\"Не удалось получить список пользователей\");\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error WS connecting :(\");\r\n        dispatch(CHANGE_CONNECTING_STATUS_AC(false));\r\n        throw error;\r\n      });\r\n  };\r\n};\r\n\r\nexport const webSocketReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionsNames.CHANGE_CONNECTING_STATUS:\r\n      return {\r\n        ...state,\r\n        connectingStatus: action.status,\r\n      };\r\n    case actionsNames.CHANGE_USERS_LIST:\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"," \r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { profileReducer } from './reducers/profileReducer';\r\nimport { headerReducer } from './reducers/headerReducer';\r\nimport { loginroomReducer } from './reducers/loginroomReducer';\r\nimport { messagesReducer } from './reducers/messagesChatReducer';\r\nimport { navbarReducer } from './reducers/navbarReducer';\r\nimport { updatesReducer } from './reducers/updatesReducer';\r\nimport { mainReducer } from './reducers/mainReducer';\r\nimport thunk from \"redux-thunk\";\r\nimport { webSocketReducer } from './reducers/webSocketReducer';\r\n\r\nlet reducers = combineReducers({\r\n    manyPages: mainReducer,\r\n    messagesPage: messagesReducer,\r\n    sidebarPage: navbarReducer,\r\n    loginRoomPage :loginroomReducer,\r\n    webSocket: webSocketReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunk));\r\nexport default store;\r\n","import React from 'react';\r\nimport NavbarStyle from './navbar.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport UsernameIcon from \"../../assets/Sidebar/username2.png\";\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nfunction Navbar(props) {\r\n    const mappedMenuArray = props.sidebarMenuItems.map((menuItem) =>\r\n        <NavLink to={menuItem.link} key={props.sidebarMenuItems.indexOf(menuItem)} activeClassName = {NavbarStyle.activeLink}>\r\n            <li className={NavbarStyle.menuItemStyle}>\r\n                <span className={NavbarStyle.menuItemIcon}>\r\n                    <FontAwesomeIcon icon = {menuItem.icon} />\r\n                </span>\r\n                <span className={NavbarStyle.menuItemName}>{menuItem.itemName}</span>\r\n            </li>\r\n        </NavLink>\r\n    );\r\n    return (\r\n        <div className={NavbarStyle.navbar}>\r\n            <h2 className={NavbarStyle.navbarSiteTitle}>ANONUMOUS CHAT</h2>\r\n            <div className={NavbarStyle.userBlock}>\r\n                <img src={UsernameIcon} alt=\"username\" />\r\n                <span>Your name: {props.username}</span>\r\n            </div>\r\n            <nav>\r\n                <ul>\r\n                    {mappedMenuArray}\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        username: state.manyPages.username,\r\n        sidebarMenuItems: state.sidebarPage.sidebarMenuItems\r\n    }\r\n}\r\n\r\nconst NavbarContainer = connect(mapStateToProps, null)(Navbar);\r\nexport default NavbarContainer;\r\n","import React from 'react';\r\nimport LoaderStyles from './LoaderStyles.module.css';\r\nimport errorImg from \"../../../assets/Loader/error.png\";\r\n\r\nfunction Loader(props) {  \r\n    return (\r\n        <div className={\"workspace\"}>\r\n            <div className={`${LoaderStyles.dFlexScreenLoader} ${LoaderStyles.loader}`}>\r\n                {props.lazyLoadComponent && !props.errors ? \r\n                <aside>\r\n                    <div className={LoaderStyles.ldsRoller}><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n                </aside>\r\n                : <div className = {LoaderStyles.dFlexScreenLoader}>\r\n                    <img src={errorImg} alt=\"error image\" />\r\n                    <h1>Error</h1>\r\n                    <span>{props.errors}</span>    \r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default Loader;","import React from 'react'\r\nimport MainScrMsg from './styles/messagesFrom.module.css';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEdit, faEnvelope, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { useEffect, useState } from 'react';\r\nimport ReactNotification from 'react-notifications-component';\r\nimport 'react-notifications-component/dist/theme.css';\r\nimport { store } from 'react-notifications-component';\r\nimport socket from '../../webSocket/socketConnect';\r\n\r\nconst notification = { //Дефолтный обьект с оповещением (всплывающее окно) об ошибках для пользователя\r\n    title: \"Notification\", //Заголовок оповещения\r\n    message: \"Notification message\", //Сообщение с оповещением (инфо об ошибке)\r\n    type: \"danger\", //Тип оповещения (Меняет цвет отображения)\r\n    insert: \"top\", //Хз что, оно по дефолту было\r\n    container: \"top-center\", //Позиционирование на экране\r\n    dismiss: { //Настройки во время отображения\r\n        duration: 2000, //Длительность отображения\r\n        pauseOnHover: true, //Остановить таймер показа при наведении\r\n        onScreen: true //Тоже хз, что но работает с ним красиво\r\n      }\r\n  };\r\n  \r\nlet MainScreenMsgInputForm = (props) => {//Компонента, которая отображает форму ввода сообщения, кнопки взаимодействия и т.д.\r\n    const [selectedMessagesLength, setSelectedMessagesLength] = useState(props.selectedMessagesLength); //Хук для того, чтобы кнопки взаимодействия\r\n    //Например: изменить или удалить переходили в состояния disabled/enabled в зависимости от того, сколько выбрано сообщений\r\n    \r\n    useEffect (() => { //Хук, срабатывающий если количество выбранных сообщений изменилось. Он вызывает другой хук, который enable\\disable кнопки.\r\n        setSelectedMessagesLength(props.selectedMessagesLength);\r\n    }, [props.selectedMessagesLength])\r\n\r\n    useEffect (() => {\r\n        if(props.errorServerMessagesNotification){\r\n            store.addNotification({\r\n                ...notification,\r\n                title: \"Error\",\r\n                message: props.errorServerMessagesNotification\r\n            });\r\n            props.clearServerMessageAfterView();\r\n        } \r\n    }, [props.errorServerMessagesNotification])\r\n\r\n    useEffect (() => {  \r\n        socket.on(\"ROOM:SET_USERS\", (users) => {\r\n                props.setUsersList(users);\r\n            });\r\n        socket.on(\"ROOM:NEW_MESSAGE\", ({username, text, messageID}) => {\r\n            props.sendNewMessageWS(props.errors, username, props.roomID, text, messageID, 'opponent');\r\n            });\r\n        }, []);\r\n    \r\n    const validationSchema = yup.object().shape({ //Схема валидации для поля ввода сообщений.\r\n        messageTextarea: yup.string().typeError(\"This field should be string\").required(\"Message field is empty\")\r\n    }) //Валидационная схема поля ввода сообщений\r\n    return (\r\n        <>\r\n        <Formik\r\n            initialValues = {{\r\n                messageTextarea: '' //Временная переменная хранения данных из поля ввода сообщений\r\n            }}\r\n            onSubmit={(values, resetForm) => { //Функция, срабатывающая при нажатии на кнопку \"Send message\"\r\n                props.sendNewMessageDB(props.errors, props.myUsername, props.roomID, values.messageTextarea, \r\n                    props.usernameSecretKey, props.messagesListLength, props.errorServerMessagesNotification);\r\n                    resetForm.setFieldValue('messageTextarea', '');\r\n            }} //Функция отправки API к серверу с новым сообщением и отправка сообщения в UI\r\n            validationSchema = {validationSchema} //Подключение схемы валидации к Формику\r\n            validateOnBlur //Запуск валидации при изменении значения поля\r\n        >   \r\n        {({values, handleChange, isValid, handleSubmit, dirty}) => ( //Функции и переменные, которые регулируют логику взаимодействия с формой\r\n            \r\n            <div className={MainScrMsg.controlElementsChat}>{/* Блок со всей формой ввода (поле ввода и кнопки взаимодействия)*/} \r\n                <div className={MainScrMsg.controlElementsChatHeaderWithTextareaBtns}>{/* Блок с кнопками взаимодействия (изменить, удалить)*/} \r\n                    {/*Кнопка \"Delete\"*/}\r\n                    <div \r\n                    disabled = {!selectedMessagesLength >= 1} /*Отключить если не выбраны сообщения*/\r\n                    className={MainScrMsg.changeSendedMessageControlsBtns}\r\n                    onClick={!selectedMessagesLength >= 1?\r\n                        () => store.addNotification({\r\n                                ...notification,\r\n                                title: \"Error\",\r\n                                message: \"There are no messages selected for deletion.\",\r\n                                }): null}  /*Показать оповещение с ошибкой, если не выбраны сообщения для удаления*/\r\n                    >\r\n                        <span onClick={() => props.deleteMessages(props.roomID, props.selectedMessages)}>\r\n                            <FontAwesomeIcon icon={faTrashAlt}/>\r\n                            Delete\r\n                        </span>\r\n                    </div>\r\n\r\n                    {/*Кнопка \"Change\"*/}\r\n                    <div \r\n                    disabled = {selectedMessagesLength !== 1} /*Отключить если выбрано больше одного или не выбрано вовсе сообщения*/\r\n                    className={MainScrMsg.changeSendedMessageControlsBtns}\r\n                    onClick={selectedMessagesLength !== 1 /*Включить работу кнопки только если выбрано одно сообщение*/\r\n                        ?() => store.addNotification({\r\n                                ...notification,\r\n                                title: \"Error\",\r\n                                message: \"No message selected for change.\",\r\n                                }) /*Показать оповещение с ошибкой, если сообщение для изменения не выбрано*/\r\n                        :() => store.addNotification({\r\n                            ...notification,\r\n                            title: \"Error\",\r\n                            message: \"This functional is development.\",\r\n                            })} /*Показать оповещение с ошибкой, если выбрано сообщение. (Но функционал этой кнопки пока не готов!!!)*/\r\n                    >\r\n                        <span >\r\n                            <FontAwesomeIcon icon={faEdit}/>\r\n                            Change\r\n                        </span>\r\n                    </div>          \r\n                </div>\r\n\r\n                    <Form className={MainScrMsg.controlsBtns}>       \r\n                        <Field  /*Поле ввода сообщений */\r\n                        as = \"textarea\"\r\n                        type = \"textarea\"\r\n                        name = \"messageTextarea\"\r\n                        placeholder=\"Enter new message...\"\r\n                        value =  {values.messageTextarea}  /*Значение поля ввода сообщений достаётся из Formik, чтобы работала yup валидация*/\r\n                        onChange = {handleChange} /*Функция, которая срабатывает во время изменения контента в поле ввода*/\r\n                        onKeyDown={(e) => { /*Отправить сообщение по нажатию Enter*/\r\n                            if (e.key === 'Enter') {\r\n                                e.preventDefault();\r\n                                handleSubmit(); /*Функция отправки сообщения*/\r\n                            }\r\n                        }}\r\n                        /> {/*Поле ввода сообщений с конфигурационными значениями */ }\r\n                        \r\n                            <button\r\n                            disabled = {(!isValid && !dirty) || !dirty} //Отключить кнопку если форма не валидна или не тронута\r\n                            type=\"submit\"\r\n                            id={MainScrMsg.sendMessageBtn}\r\n                            onSubmit = {handleSubmit}> {/*Функция отправки сообщения*/}\r\n                                <FontAwesomeIcon icon={faEnvelope} />\r\n                                </button>\r\n                             {/*Кнопка отправки сообщения на сервер */}\r\n                    </Form>\r\n            </div>\r\n        )}  \r\n        </Formik>\r\n        <ReactNotification />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainScreenMsgInputForm;\r\n","import React from 'react';\r\nimport MainScrMsgStyle from './styles/messagesChatBubbles.module.css';\r\nimport { useEffect, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faExclamationTriangle, faUserSecret, faUserTie } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction messageSenderStyle(messageOwnership) {//Функция, которая добавляет класс, \r\n    //если сообщение в базе хранится не с ника пользователя (если оппонент, то класс, передвигающий сообщение вправо)\r\n    if (messageOwnership === \"me\") {\r\n        return MainScrMsgStyle.myMessage; //Вернуть класс, двигающий сообщение влево, если ник совпадает с моим\r\n    } else {\r\n        return MainScrMsgStyle.opponentMessage;//Вернуть класс, двигающий сообщение вправо, если ник не совпадает с моим\r\n    }\r\n}\r\nconst getMessagesUIMap = ( //Отобразить сообщения с сервера\r\n    messagesList, //Массив сообщений с сервера, полученный через API запрос\r\n    errors, //Переменная ошибок (если они есть)\r\n    myUsername, //Мой ник в комнате\r\n    selectMessageFromChat, //Переменная, указывающая, выбрано ли сообщение (например для даления). Вешает класс подстветки, если true\r\n    selectedMessagesArray, //Массив выбранных элементов (например для удаления). Вешает класс подстветки и отправляет на сервер ID-шники сообщений после клика на кнопку удаления \r\n    setMessageSelected, // Функция хука, для ререндера стилей выбранного сообщения\r\n    messageSelected = false //Изначальное состояние всех сообщений (не выбрано, например для удаления).\r\n    ) =>{\r\n    if (Object.keys(messagesList).length > 0) {//Проверка на присутствие сообщений в массиве (если сообщений нет, будет выведено соответствующее опопвещение).\r\n        const mappedMessagesArray = messagesList.map((message) => //Преобразуем массив обьектов сообщений в массив JSX элементов\r\n        <div className = \r\n        {`${MainScrMsgStyle.message} \r\n          ${messageSenderStyle(message.messageOwnership)}\r\n          ${message.errors && MainScrMsgStyle.errorMessage}\r\n          ${selectedMessagesArray.indexOf(message.id) !== -1 && MainScrMsgStyle.selectedMessage}`//Вешает класс для стилизации сообщения, (вправо или влево на экране) в завистимости от ответа функции\r\n        }\r\n        key={messagesList.indexOf(message)} //Вешаются ключии для каждого сообщения, чтобы реакт лишний раз не делал ререндер\r\n        >\r\n            {message.messageOwnership === 'me' && <div className={MainScrMsgStyle.messageInfo}>\r\n                <FontAwesomeIcon icon={faUserTie} className = {\"fas fa-lg\"}/>\r\n                <span className={MainScrMsgStyle.messageSender}>{message.messageSender}</span>\r\n            </div>}\r\n                <p\r\n                    onClick = {() => { if(message.messageOwnership === 'me'){\r\n                        selectMessageFromChat(message.id);//Добавляет (если его нет) и удаляет (если он есть) ID с выбранным сообщением в массив выбранных сообщений \r\n                        setMessageSelected(!messageSelected); //Меняет состояние хука выбранного сообщения, чтобы раюотала стилизация подстветки\r\n                    }}}\r\n                >   \r\n                    {message.message} {/*Выводит отправителя и сообщение на экран */}\r\n                    {message.errors \r\n                        && <span className = {MainScrMsgStyle.errorMessageIcon} title=\"Message not sended\">\r\n                        <FontAwesomeIcon icon ={faExclamationTriangle} className= \"fas fa-md\"/>\r\n                        </span>\r\n                    }\r\n                </p>\r\n                {message.messageOwnership === 'opponent' && <div className={MainScrMsgStyle.messageInfo}>\r\n                    <FontAwesomeIcon icon={faUserSecret} className = {\"fas fa-lg\"}/>\r\n                    <span className={MainScrMsgStyle.messageSender}>{message.messageSender}</span>\r\n                </div>\r\n                }\r\n        </div>\r\n        \r\n        );\r\n        return mappedMessagesArray; //Возвращает готовый массив JSX элементов с сообщениями для отображения\r\n    }else{\r\n        return(\r\n            <div className={MainScrMsgStyle.messagesList}> \r\n                <p className={MainScrMsgStyle.messagesList}>{errors}</p> //Если есть ошибки, они выведутся через этот элемент\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst MessagesChatPage = React.memo((props) => { //Компонента, которая будет отрендерена. Отвечает за часть, где выводятся сообщения (без кнопок взаимодействия).\r\n    const chatScreen = React.createRef(); //Реф на блок с сообщениями для скролла\r\n    const [messageSelected, setMessageSelected] = useState(false); //Хук, срабатывающий, когда кликнули на сообщение\r\n\r\n    const messages = getMessagesUIMap(\r\n        props.messagesList,\r\n        props.errors,\r\n        props.myUsername,\r\n        props.selectMessageFromChat,\r\n        props.selectedMessages,\r\n        setMessageSelected,\r\n        messageSelected\r\n);//Получить список всех сообщений с BLL\r\n        useEffect(() => {\r\n            if (props.messagesList.length) {\r\n                chatScreen.current.scrollTop = chatScreen.current.scrollHeight;\r\n            }\r\n            \r\n        }, [props.messagesList]); //Скролл чата вниз, когда отправилось или удалилось сообщение\r\n    return (\r\n        <>\r\n        {props.messagesEmptyStatus \r\n        ? <div className={MainScrMsgStyle.notification}><span className = {MainScrMsgStyle.errors}>No saved messages from room.</span></div> \r\n        : <div className={MainScrMsgStyle.messagesList} ref ={chatScreen}>\r\n            {props.loadedMessagesArrayLength >= 10 ? <button \r\n            type = \"button\" \r\n            className ={MainScrMsgStyle.loadMoreBtn} \r\n            onClick={() => props.loadMoreMessages(props.roomID, props.roomIsExists, props.myUsername, props.firstMessageID, props.usernameSecretKey)}\r\n            >Load more messages</button> \r\n            : null}\r\n            {messages}{/* render all messages from mapped array */}\r\n        </div>}\r\n        </>\r\n    )\r\n})\r\n\r\nexport default MessagesChatPage;\r\n","import React from 'react';\r\nimport MainScrMsg from './styles/messagesChatArea.module.css';\r\nimport MainScreenMsgInputForm from './MainScreenMsgInputForm';\r\nimport MessagesChatPage from './MessagesChatPage';\r\nimport Header from './../Header/Header';\r\n\r\nfunction MessagesClear(props){\r\n    return (\r\n        <div className=\"workspace\">\r\n            <main className={MainScrMsg.Main}>\r\n                <div className={MainScrMsg.chatBlock}>  \r\n                    <Header \r\n                    {...props} \r\n                    loadedFromMessagesPage = {true}\r\n                    headerTitle = {`Room: ${props.roomID}`}\r\n                    headerDescription = {`Users: ${props.usersCount} `}\r\n                    />\r\n                    <MessagesChatPage {...props}/>\r\n                    <MainScreenMsgInputForm {...props}/>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessagesClear;\r\n","import React from 'react';\r\nimport { useEffect } from \"react\";\r\nimport Loader from '../CommonComponents/Loader/Loader';\r\nimport MainScreenMsgClear from \"./MainScreenMsgClear\";\r\nimport { connect } from 'react-redux';\r\nimport { CHANGE_LOADING_STATUS_AC, addNewMessageFromServerTC, DELETE_MESSAGES_FROM_CHAT_AC, deleteMessagesFromServerTC, getMessagesFromServerTC} from '../../redux/reducers/messagesChatReducer';\r\nimport { SELECT_MESSAGE_FROM_CHAT_AC, ADD_ERROR_SERVER_MESSAGE_NOTIFICACTION_AC, ADD_NEW_MESSAGE_FROM_DATA_BASE_AC } from './../../redux/reducers/messagesChatReducer';\r\nimport { CHANGE_USERS_LIST_AC } from '../../redux/reducers/webSocketReducer';\r\n\r\nfunction MainScreenMessagesLogicComponent(props) {\r\n    //get array messages from file with map\r\n    useEffect(() => {\r\n        if(props.messagesList <= 0){\r\n            props.getMessagesFromServerTC(props.roomID, props.roomIsExists, null, props.myUsername, props.usernameSecretKey);\r\n            props.webSocketConnect(props.roomID, props.myUsername, props.usernameSecretKey);\r\n        }\r\n    }, []) //get messages from server API \r\n    return(\r\n        <>\r\n        {props.isLoading ? <Loader errors = {props.errors} lazyLoadComponent = {true} /> : <MainScreenMsgClearComponent />}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        myUsername: state.manyPages.username,\r\n        roomID: state.manyPages.roomID,\r\n        messagesList: state.messagesPage.messagesList,\r\n        changedTextareaMessage: state.messagesPage.changedTextareaMessage,\r\n        errors: state.messagesPage.errors,\r\n        isLoading: state.messagesPage.isLoading,\r\n        roomIsExists: state.manyPages.roomIsExists,\r\n        messagesEmptyStatus: state.messagesPage.messagesEmptyStatusRoom,\r\n        selectedMessages: state.messagesPage.seletctedMessages,\r\n        selectedMessagesLength: state.messagesPage.seletctedMessages.length,\r\n        usernameSecretKey: state.manyPages.usernameSecretKey,\r\n        messagesListLength: state.messagesPage.messagesList.length,\r\n        errorServerMessagesNotification: state.messagesPage.errorServerMessagesNotification,\r\n        firstMessageID: state.messagesPage.firstMessageID,\r\n        loadedMessagesArrayLength: state.messagesPage.loadedMessagesArrayLength,\r\n        usersCount: state.webSocket.users.length\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        sendNewMessageDB: (errors, myUsername, roomID, message, usernameSecretKey) => {\r\n            dispatch(addNewMessageFromServerTC(errors, myUsername, roomID, message, usernameSecretKey));\r\n        },\r\n        sendNewMessageWS: (errors, myUsername, roomID, message, usernameSecretKey) => {\r\n            dispatch(ADD_NEW_MESSAGE_FROM_DATA_BASE_AC(errors, myUsername, roomID, message, usernameSecretKey));\r\n        },\r\n        changeLoadingStatus: (loadingStatus) =>{\r\n            dispatch(CHANGE_LOADING_STATUS_AC(loadingStatus));\r\n        },\r\n        selectMessageFromChat: (messageID) => {\r\n            dispatch(SELECT_MESSAGE_FROM_CHAT_AC(messageID));\r\n        },\r\n        deleteMessages: (roomID, messagesID) => {\r\n            dispatch(deleteMessagesFromServerTC(roomID, messagesID));\r\n            dispatch(DELETE_MESSAGES_FROM_CHAT_AC());\r\n        },\r\n        clearServerMessageAfterView: () => {\r\n            dispatch(ADD_ERROR_SERVER_MESSAGE_NOTIFICACTION_AC(''));\r\n        },\r\n        loadMoreMessages: (roomID, roomIsExists, myUsername, firstMessageID, usernameSecretKey) => {\r\n            dispatch(getMessagesFromServerTC(roomID, roomIsExists, myUsername, firstMessageID, usernameSecretKey));\r\n        },\r\n        setUsersList: (usersList) =>{\r\n             dispatch(CHANGE_USERS_LIST_AC(usersList));\r\n         }\r\n    }\r\n}\r\nconst MainScreenMsgClearComponent = connect(mapStateToProps, mapDispatchToProps)(MainScreenMsgClear);\r\nexport default MainScreenMessagesLogicComponent;\r\n","import React from 'react';\r\nimport MainScreenMessagesLogicFunctions from \"./MainScreenMessagesLogicFunctions\";\r\nimport { connect } from 'react-redux';\r\nimport { getMessagesFromServerTC } from '../../redux/reducers/messagesChatReducer';\r\nimport { webSocketConnectTC } from '../../redux/reducers/webSocketReducer';\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        myUsername: state.manyPages.username,\r\n        usernameSecretKey: state.manyPages.usernameSecretKey,\r\n        roomID: state.manyPages.roomID,\r\n        isLoading: state.messagesPage.isLoading,\r\n        roomIsExists: state.manyPages.roomIsExists,\r\n        errors: state.messagesPage.errors,\r\n        messagesList: state.messagesPage.messagesList,\r\n        webSocketConnected: state.webSocket.connectingStatus,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        getMessagesFromServerTC: (roomID, roomIsExists, myUsername, firstMessageID, usernameSecretKey) =>{\r\n            dispatch(getMessagesFromServerTC(roomID, roomIsExists, firstMessageID, myUsername, usernameSecretKey));   \r\n        },\r\n        webSocketConnect: (roomID, myUsername, usernameSecretKey) => {\r\n            dispatch(webSocketConnectTC(roomID, myUsername, usernameSecretKey));\r\n        }\r\n    }\r\n}\r\n\r\nconst MessagesContainer = connect(mapStateToProps, mapDispatchToProps)(MainScreenMessagesLogicFunctions);\r\nexport default MessagesContainer;\r\n","import React from 'react'\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div>\r\n            <h1>404</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404;","import React, {Suspense} from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n//import HeaderContainer from '../Header/HeaderContainer';\r\nimport Navbar from '../navbar/Navbar';\r\n//import Footer from '../Footer/Footer';\r\nimport MessagesContainer from '../MainScreenMsg/MessagesContainer';\r\nimport Loader from '../CommonComponents/Loader/Loader';\r\nimport Error404 from '../404/Error404';\r\n// import socketConnect from '../../webSocket/socketConnect'\r\nconst Profile = React.lazy(() => import('../profile/Profile'));\r\nconst Updates = React.lazy(() => import('../updates/Updates'));\r\nconst Logout = React.lazy(() => import('../Logout/Logout'));\r\n\r\nfunction MainComponent(props) { //Компонент, который рендерится если пользователь залогинился в комнату\r\n    return (\r\n        <div className=\"mainScreen\">\r\n            <div className=\"container\">\r\n                {/* <HeaderContainer\r\n                /> */}\r\n\r\n                    <Navbar\r\n                        sidebarMenuItems={props.store.sidebarPage.sidebarMenuItems}\r\n                        myUsername = {props.store.manyPages.username}\r\n                    />\r\n                    <Route exact path=\"/profile\" >\r\n                        <Suspense fallback = {<Loader lazyLoadComponent = {true} />}>\r\n                            <Profile\r\n                                username={props.store.manyPages.username}\r\n                            />\r\n                        </Suspense>  \r\n                    </Route>\r\n\r\n                    <Route exact path=\"/updates\" >\r\n                        <Suspense fallback = {<Loader lazyLoadComponent = {true}/>}>\r\n                            <Updates />\r\n                        </Suspense>  \r\n                    </Route>\r\n\r\n                    <Route path=\"/messages/:roomid?\" >\r\n                        <MessagesContainer />\r\n                    </Route>\r\n                    <Route exact path=\"/logout\">\r\n                        <Suspense fallback = {<Loader lazyLoadComponent = {true}/>}>\r\n                            <Logout />\r\n                        </Suspense>\r\n                    </Route>\r\n                    <Route exact path=\"/404\">\r\n                        <Error404 />\r\n                    </Route>\r\n                    {/* <Footer /> */}\r\n                    <Redirect from=\"*\" to=\"/404\" />\r\n                    <Redirect exact from=\"/\" to=\"/messages\" />{/*Редирект на страницу сообщений, если пользователь ввёл ссылку-белиберду*/}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainComponent;\r\n","import React from 'react';\r\nimport { Formik } from 'formik';\r\nimport * as yup from \"yup\";\r\nimport LoginRoomStyle from './loginRoom.module.css';\r\nimport loginIcon from '../../assets/LoginRoom/loginIcon2.png';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser, faKey, faDoorClosed } from '@fortawesome/free-solid-svg-icons';\r\nimport { useEffect } from 'react';\r\n\r\nexport const LoginRoomForm = (props) => {\r\n    const [formTouched, setFormTouched] = React.useState(false);\r\n    const [showErrorExistsMessage, setShowErrorExistsMessage] = React.useState(false);\r\n    const [changeCreateRoom, setChangeCreateRoom] = React.useState(false);\r\n    React.useEffect(() => {\r\n        if(props.errors){\r\n            setShowErrorExistsMessage(true);\r\n        }else{\r\n            if(props.roomExistsServerResponse === null && formTouched){\r\n                setShowErrorExistsMessage(true);\r\n            }else if(props.roomExistsServerResponse !== null && formTouched){\r\n                setShowErrorExistsMessage(false);\r\n            }\r\n        }\r\n        \r\n    }, [props.roomExistsServerResponse, formTouched, props.errors])\r\n    \r\n    useEffect(()=> {\r\n        props.changeCreateOrLoginStatus(changeCreateRoom);\r\n    }, [changeCreateRoom])\r\n\r\n    const validationSchema = yup.object().shape({\r\n        username: yup.string().typeError(\"This field should be string\")\r\n        .min(3 , \"Minimum length for this field - 3 characters\")\r\n        .max(20, \"Maximum length for this field - 20 characters\")\r\n        .required(\"This is a required field\"),\r\n        secretKeyUsername: yup.string().typeError(\"This field should be string\")\r\n        .min(3 , \"Minimum length for this field - 3 characters\")\r\n        .max(20, \"Maximum length for this field - 20 characters\")\r\n        .required(\"This is a required field\"),\r\n        roomID: yup.string().typeError(\"This field should be string\")\r\n        .min(3 , \"Minimum length for this field - 3 characters\")\r\n        .max(20, \"Maximum length for this field - 20 characters\")\r\n        .required(\"This is a required field\"),\r\n    })\r\n\r\n    return (\r\n        <>\r\n        <Formik \r\n        initialValues = {{\r\n            username: \"\",\r\n            secretKeyUsername: \"\", \r\n            roomID: \"\",\r\n        }}\r\n        validateOnBlur\r\n        validationSchema = {validationSchema}\r\n        onSubmit = {(values, resetForm) => {        \r\n            props.sendDataFields(values.username, values.secretKeyUsername, values.roomID, changeCreateRoom);\r\n            setFormTouched(true);\r\n        }}\r\n        >\r\n\r\n        {({values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty}) => (\r\n                <form className={LoginRoomStyle.form}\r\n                onKeyDown={(e) => {\r\n                    if (e.key === 'Enter') {\r\n                        e.preventDefault();\r\n                      handleSubmit();\r\n                    }\r\n                }}>\r\n                    <div className = {LoginRoomStyle.titleAndLogo}>\r\n                        <img src={loginIcon} alt=\"Login icon\" />\r\n                        <h2>{changeCreateRoom ? \"Create room\" : \"Login room\"}</h2>\r\n                    </div>\r\n\r\n                    {showErrorExistsMessage && !changeCreateRoom\r\n                    ? <span className={LoginRoomStyle.messageFromDB}>\r\n                        {!props.errors ? \"Uncorrect data. Please, try again.\" : props.errors}\r\n                        </span> \r\n                    : null} {/*Если комната не была найдена в базе */}\r\n\r\n                    <div className = {LoginRoomStyle.fieldBlock} tabIndex=\"1\">\r\n                        <FontAwesomeIcon icon ={faUser} className=\"fas fa-lg\"/>\r\n                        <input\r\n                            name = \"username\"\r\n                            value = {values.username}\r\n                            placeholder=\"Username\"\r\n                            type=\"text\"\r\n                            onChange= {handleChange}\r\n                            onBlur = {handleBlur}\r\n                            onKeyPress = {props.enterKeyPressed}\r\n                        />\r\n                        {touched.username && errors.username && <span className={LoginRoomStyle.error}>{errors.username}</span>}\r\n                    </div>\r\n\r\n                    <div className = {LoginRoomStyle.fieldBlock} tabIndex=\"2\">\r\n                    <FontAwesomeIcon icon ={faKey} className=\"fas fa-lg\"/>\r\n                        <input\r\n                            name = \"secretKeyUsername\"\r\n                            value = {values.secretKeyUsername}\r\n                            placeholder=\"Secret Key\"\r\n                            type=\"text\"\r\n                            id=\"secretKeyUsernameInput\"\r\n                            onChange= {handleChange}\r\n                            onBlur = {handleBlur}\r\n                            onKeyPress = {props.enterKeyPressed}\r\n                        />\r\n                        {touched.secretKeyUsername && errors.secretKeyUsername && <span className={LoginRoomStyle.error}>{errors.secretKeyUsername}</span>}\r\n                    </div>\r\n\r\n                    <div className = {LoginRoomStyle.fieldBlock} tabIndex=\"3\">\r\n                        <FontAwesomeIcon icon ={faDoorClosed} className=\"fas fa-lg\"/>\r\n                        <input\r\n                            name= \"roomID\"\r\n                            value = {values.roomID}\r\n                            placeholder=\"Room ID\"\r\n                            type=\"text\"\r\n                            id=\"roomIdInput\"\r\n                            onChange = {handleChange}\r\n                            onBlur = {handleBlur}\r\n                            onKeyPress = {props.enterKeyPressed}\r\n                            />\r\n                        {touched.roomID && errors.roomID && <span className={LoginRoomStyle.error}>{errors.roomID}</span>}\r\n                    </div>\r\n                <button\r\n                    disabled = {(!isValid && !dirty) || !dirty}\r\n                    type=\"submit\"\r\n                    onClick = {handleSubmit}\r\n                    className={LoginRoomStyle.loginBtn}\r\n                    tabIndex=\"4\"\r\n                >{!changeCreateRoom ? props.loginBtnName : \"Create\"}</button>\r\n\r\n                <span \r\n                className = {LoginRoomStyle.createNewRoom}\r\n                onClick = {() => {setChangeCreateRoom(!changeCreateRoom)}}>{!changeCreateRoom ? \"Create new room\" : \"Login exists room\"}</span>\r\n            </form>\r\n        )}\r\n        </Formik>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport LoginRoomStyle from './loginRoom.module.css';\r\nimport { LoginRoomForm } from './LoginRoomForm';\r\n\r\nfunction LoginRoomClear(props) {\r\n    return (\r\n        <div className = {LoginRoomStyle.loginScreen}>\r\n            <div  className=\"workspace\" className={LoginRoomStyle.loginroomBlock}>\r\n                <div className = {LoginRoomStyle.positionForm}>\r\n                    <LoginRoomForm  {...props}/>\r\n                </div>\r\n            </div>   \r\n        </div>\r\n            \r\n    );\r\n}\r\n\r\nexport default LoginRoomClear;\r\n","import React from 'react';\r\nimport LoginRoomClear from './LoginRoomClear';\r\nimport { SEND_LOGINROOM_DATA_AC, checkRoomExistsTC, CHANGE_CREATE_OR_LOGIN_STATUS_AC} from '../../redux/reducers/loginroomReducer';\r\nimport { SAVE_ROOMID_AND_USERNAME_LOCALSTORAGE_AC } from '../../redux/reducers/mainReducer';\r\nimport { connect } from 'react-redux';\r\nimport { createNewRoomTC, SET_ERROR_MESSAGE_AC } from './../../redux/reducers/loginroomReducer';\r\n    \r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        usernameFieldValue: state.loginRoomPage.usernameFieldValue,\r\n        roomIDFieldValue: state.loginRoomPage.roomIDFieldValue,\r\n        roomID: state.manyPages.roomID,\r\n        errorsValidation: state.loginRoomPage.notCorrectValidationData,\r\n        loginBtnName: state.loginRoomPage.loginBtnName,\r\n        loginBtnClickableStatus: state.loginRoomPage.loginBtnClickableStatus,\r\n        roomIsExists: state.manyPages.roomIsExists,\r\n        roomExistsServerResponse: state.loginRoomPage.roomIsExistsServerResponse,\r\n        errors: state.loginRoomPage.errors\r\n    }\r\n}\r\nconst mapDispatchTopProps = (dispatch) => {\r\n    return{\r\n        sendDataFields: (usernameFieldValue, usernameSecretKeyFieldValue, roomIDFieldValue, createOrLoginStatus) => {\r\n            dispatch(SET_ERROR_MESSAGE_AC(\"\"));\r\n            dispatch(SEND_LOGINROOM_DATA_AC(usernameFieldValue, usernameSecretKeyFieldValue, roomIDFieldValue));\r\n            dispatch(SAVE_ROOMID_AND_USERNAME_LOCALSTORAGE_AC());\r\n            if(createOrLoginStatus){\r\n                dispatch(createNewRoomTC(createOrLoginStatus));\r\n            }else{\r\n                dispatch(checkRoomExistsTC());\r\n            }\r\n        },\r\n        enterKeyPressed: (e, usernameFieldValue, usernameSecretKeyFieldValue, roomIDFieldValue, createOrLoginStatus) =>{\r\n            if(e.key === 'Enter'){\r\n              console.log(e)\r\n                dispatch(SEND_LOGINROOM_DATA_AC(usernameFieldValue, usernameSecretKeyFieldValue, roomIDFieldValue));\r\n                dispatch(SAVE_ROOMID_AND_USERNAME_LOCALSTORAGE_AC());\r\n                dispatch(checkRoomExistsTC(createOrLoginStatus));\r\n            }\r\n        },\r\n        changeCreateOrLoginStatus: (status) => {\r\n            dispatch(CHANGE_CREATE_OR_LOGIN_STATUS_AC(status));\r\n        }\r\n    }\r\n}\r\n\r\nconst LoginRoomContainer = connect(mapStateToProps, mapDispatchTopProps)(LoginRoomClear);\r\nexport default LoginRoomContainer;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { checkRoomExistsTC } from '../../redux/reducers/loginroomReducer';\r\nimport MainComponent from \"../CommonComponents/MainComponent\";\r\nimport LoginRoomContainer from '../LoginRoom/LoginRoomContainer';\r\nimport { SAVE_ROOMID_AND_USERNAME_LOCALSTORAGE_AC } from './../../redux/reducers/mainReducer';\r\n\r\nfunction LogginingRouter(props){\r\n    React.useEffect(() => {\r\n        props.attemptToLoginWithOldData();\r\n        props.checkRoomExistsTC();\r\n    }, [])\r\n    return(\r\n        <>\r\n        {props.roomIsExists ? <MainComponent store={props.store} /> : <LoginRoomContainer />}\r\n        </>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) =>{\r\n    return{\r\n        roomIsExists: state.manyPages.roomIsExists,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        attemptToLoginWithOldData: () => {\r\n            dispatch(SAVE_ROOMID_AND_USERNAME_LOCALSTORAGE_AC());\r\n        },\r\n        checkRoomExistsTC: () => {\r\n            dispatch(checkRoomExistsTC());\r\n        }\r\n    }\r\n}\r\n\r\nconst Loggining = connect(mapStateToProps, mapDispatchToProps)(LogginingRouter);\r\nexport default Loggining;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./components/CommonComponents/defaultStyles.css\";\nimport store from \"./redux/reduxStore\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter, Redirect } from \"react-router-dom\";\nimport LogginingRouter from \"./components/CommonComponents/LogginingRouter\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <Redirect exact from=\"/\" to=\"/login\" />\n        <LogginingRouter store={store.getState()} dispatch={store.dispatch} />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nwindow.store = store;\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"navbar_navbar__1XM5B\",\"navbarSiteTitle\":\"navbar_navbarSiteTitle__3yU6J\",\"menuItemName\":\"navbar_menuItemName__2Q8ko\",\"menuItemStyle\":\"navbar_menuItemStyle__2tdIa\",\"activeLink\":\"navbar_activeLink__3Y2nl\",\"menuItemIcon\":\"navbar_menuItemIcon__21vHZ\",\"userBlock\":\"navbar_userBlock__27Q1W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlElementsChat\":\"messagesFrom_controlElementsChat__3kD7_\",\"controlsBtns\":\"messagesFrom_controlsBtns__2KN13\",\"sendMessageBtn\":\"messagesFrom_sendMessageBtn__39Igb\",\"controlElementsChatHeaderWithTextareaBtns\":\"messagesFrom_controlElementsChatHeaderWithTextareaBtns__1lYu5\",\"errors\":\"messagesFrom_errors__2R0r9\",\"changeSendedMessageControlsBtns\":\"messagesFrom_changeSendedMessageControlsBtns__2V-Cl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__240pj\",\"headerRoomInfo\":\"header_headerRoomInfo__27DaO\",\"headerControlsBtns\":\"header_headerControlsBtns__2SZ__\",\"bellAnimation\":\"header_bellAnimation__3gJCI\",\"ring\":\"header_ring__3RFYs\",\"selectedMessagesCounter\":\"header_selectedMessagesCounter__1E3Ak\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dFlexScreenLoader\":\"LoaderStyles_dFlexScreenLoader__3EWrv\",\"loader\":\"LoaderStyles_loader__152ED\",\"ldsRoller\":\"LoaderStyles_ldsRoller__LwjCn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesList\":\"messagesChatBubbles_messagesList__Qvbty\",\"message\":\"messagesChatBubbles_message__SKylW\",\"notification\":\"messagesChatBubbles_notification__2blMM\",\"myMessage\":\"messagesChatBubbles_myMessage__3rWfx\",\"opponentMessage\":\"messagesChatBubbles_opponentMessage__1lrG6\",\"messageSender\":\"messagesChatBubbles_messageSender__2v6bY\",\"selectedMessage\":\"messagesChatBubbles_selectedMessage__ekzyd\",\"messageInfo\":\"messagesChatBubbles_messageInfo__2aMQc\",\"errorMessageIcon\":\"messagesChatBubbles_errorMessageIcon__1RmLc\",\"loadMoreBtn\":\"messagesChatBubbles_loadMoreBtn__22cbV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"messagesChatArea_Main__1mJ6C\",\"chatBlock\":\"messagesChatArea_chatBlock__3Z49R\"};","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEllipsisH } from '@fortawesome/free-solid-svg-icons';\r\nimport {faBell} from '@fortawesome/free-regular-svg-icons';\r\nimport HeaderStyle from './header.module.css';\r\n\r\nconst Header = React.memo((props, loadedFromMessagesPage = false) => {\r\n    return (\r\n        <div className={HeaderStyle.header}>\r\n                        <div className={HeaderStyle.headerRoomInfo}>\r\n                            <h3>{props.headerTitle}</h3>\r\n                            <span>{props.headerDescription}</span>\r\n                        </div>\r\n                         {props.selectedMessagesLength >= 1 && loadedFromMessagesPage && \r\n                         <span className={HeaderStyle.selectedMessagesCounter}\r\n                         >Messages selected: \r\n                            <aside>\r\n                                {props.selectedMessagesLength}\r\n                            </aside>\r\n                        </span>}\r\n\r\n                        <div className={HeaderStyle.headerControlsBtns}>\r\n                            <a href=\"#\">\r\n                                <FontAwesomeIcon icon={faEllipsisH} className={\"fas fa-lg\"}/>\r\n                            </a>\r\n                            <a href=\"#\"><FontAwesomeIcon icon={faBell} className={`\"fas fa-lg\" ${HeaderStyle.bellAnimation}`}/></a>\r\n                        </div>\r\n                    </div>\r\n    );\r\n});\r\n\r\nexport default Header;\r\n"],"sourceRoot":""}